class Solution {

    private class Pair{
        private int num;
        private int index;
        Pair(int id,int ind){
            this.num = id;
            this.index = ind;
        }
    }

    private int[] counts;
    private Pair[] temp;
    private Pair[] arr;

    public List<Integer> countSmaller(int[] nums) {
        int len = nums.length;
        counts = new int[len];
        temp = new Pair[len];
        arr = new Pair[len];
        for(int a = 0;a < len;++a){
            arr[a] = new Pair(nums[a],a);
        }

        sort(arr,0,len-1);

        List<Integer> list = new LinkedList<>();
        for(int a = 0; a < len;++a){
            list.add(counts[a]);
        }

        return list;
    }

    private void sort(Pair[] arr,int left,int right){
        if(left == right){
            return;
        }
        int mid = left + (right - left) / 2;

        sort(arr,left,mid);
        sort(arr,mid + 1,right);

        merge(arr,left,mid,right);

    }

    private void merge(Pair[] arr,int left,int mid,int right){
        for(int a = left;a <= right;++a){
            temp[a] = arr[a];
        }

        int i = left;
        int j = mid + 1;

        for(int a = left;a <= right;++a){
            if(i == mid + 1){
                arr[a] = temp[j++];
            }else if(j == right + 1){
                arr[a] = temp[i++];
                counts[arr[a].index] += j - mid - 1;
            }else if(temp[i].num > temp[j].num){
                arr[a] = temp[j++];
            }else{
                arr[a] = temp[i++];
                counts[arr[a].index] += j - mid - 1;
            }
        }
    }
}
