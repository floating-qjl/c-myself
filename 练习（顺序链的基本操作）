#include <stdio.h>
#include <string.h>
#define MaxSize 100
typedef struct
{
	int data[MaxSize];
	int top;
} Stack;

int menu()
{
	int ch;
	printf("\n\t\t顺序栈操作\n");
	printf("\t======================\n");
	printf("\t请选择\n");
	printf("\t1：入栈\n");
	printf("\t2：出栈\n");
	printf("\t3：取栈项元素\n");
	printf("\t0：退出\n");
	printf("\t======================\n");
	printf("\t选择(0, 1, 2, 3):");
	scanf("%d", &ch);
	return(ch);
}

void Init(Stack* st)
{
	st->top = -1;
}

int push(Stack* st, int x)
{
	if (st->top == MaxSize - 1)
		return 0;
	++st->top;
	st->data[st->top] = x;
	return 1;
}

int pop(Stack* st, int* x)
{
	if (st->top == -1)
		return 0;
	*x = st->data[st->top];
	--st->top;
	return 1;
}

int gettop(Stack st, int* x)
{
	if (st.top == -1)
		return 0;
	*x = st.data[st.top];
	return 1;
}
int main()
{
	int flag = 1, sel;
	int x = 0;
	Stack st;
	Init(&st);

	while (flag)
	{
		sel = menu();
		switch (sel)
		{
		case 0:
			flag = 0;
			break;
		case 1:
			printf("请输入入栈数据：");
			scanf("%d", &x);
			if (!push(&st, x))
				printf("栈满，入栈失败！\n\n");
			else
				printf("%d已入栈！\n\n", x);
			break;
		case 2:
			if (!pop(&st, &x))
				printf("栈空，出栈失败！\n\n");
			else
				printf("%d已出栈！\n\n", x);
			break;
		case 3:
			if (!gettop(st, &x))
				printf("栈空，无栈顶元素！\n\n");
			else
				printf("当前栈顶元素为%d\n\n", x);
			break;
		case 4:
			break;
		}

	}

	return 0;
}
