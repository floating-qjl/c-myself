A 点有一个过河卒，需要走到目标 B 点。卒行走规则：可以向下、或者向右。同时在棋盘上的任一点有一个对方的马
（如下图的C点），该马所在的点和所有跳跃一步可达的点称为对方马的控制点。例如下图 C 点可以控制 9 个点
（图中的P1，P2 … P8 和 C）。卒不能通过对方马的控制点。 棋盘用坐标表示，现给定A 点位置为（0,0）B 点位置为（n,m）
(n,m 为不超过 20 的整数)，马的位置为C（X,Y）（约定: C点与A点不重叠，与B点也不重叠）。要求你计算出卒从 A 点能够到达 B 点的路径的条数。





#include <stdio.h>
int fps(int arr[22][22], int n, int m)
{	
	if (0 == n && 0 == m)
		return 1;
	if (arr[n][m] == 2 || n < 0 || m < 0)
		return 0;
	return fps(arr, n - 1, m)+fps(arr, n, m - 1);
}
int main()
{
	int n, m, x, y;
	scanf("%d %d %d %d", &n, &m, &x, &y);
	int arr[22][22] = { 0 };
	arr[x][y] = 2;
	if (x + 1 <= n && y + 2 <= m)
		arr[x + 1][y + 2] = 2;
	if (x - 1 >= 0 && y + 2 <= m)
		arr[x - 1][y + 2] = 2;
	if (x + 2 <= n && y + 1 <= m)
		arr[x + 2][y + 1] = 2;
	if (x - 2 >= 0 && y + 1 <= m)
		arr[x - 2][y + 1] = 2;
	if (y - 1 >= 0 && x + 2 <= n)
		arr[x + 2][y - 1] = 2;
	if (x - 2 >= 0 && y - 1 >= 0) 
		arr[x - 2][y - 1] = 2;
	if (y - 2 >= 0 && x + 1 <= n)
		arr[x + 1][y - 2] = 2;
	if (x - 1 >= 0 && y - 2 >= 0)
		arr[x - 1][y - 2] = 2;
	int num = fps(arr, n, m);
	printf("%d", num);
	return 0;
}
