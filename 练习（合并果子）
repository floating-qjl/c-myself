在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。

每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，
所有的果子经过 n−1n-1n−1 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。

因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 111 ，
并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。

例如有 333 种果子，数目依次为 111 ， 222 ， 999 。可以先将 111 、 222 堆合并，新堆数目为 333 ，
耗费体力为 333 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 121212 ，耗费体力为 121212 。
所以多多总共耗费体力 =3+12=15=3+12=15=3+12=15 。可以证明 151515 为最小的体力耗费值。



#include <stdio.h>
#include <stdlib.h>
int n;
int test(const void* e1, const void* e2)
{
    return *(long long*)e1 - *(long long*)e2;
}
void sort(long long* arr, int a)
{
    while ((arr[a] > arr[a + 1]) && a < n-1 )
    {
        long long b = arr[a];
        arr[a] = arr[a + 1];
        arr[a + 1] = b;
        ++a;
    }
}
int main()
{
    scanf("%d", &n);
    long long* arr = (long long*)malloc(n * 8);
    for (int a = 0;a < n;++a)
        scanf("%lld", &arr[a]);
    qsort(arr, n, 8, test);
    long long sum = 0;
    for (int a = 1;a < n;++a)
    {
        arr[a] = arr[a - 1] + arr[a];
        sum += arr[a];
        if(a < n-1)
            sort(arr, a);
    }
    printf("%lld", sum);
    return 0;
}
