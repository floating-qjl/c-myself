一个迷宫由R行C列格子组成，有的格子里有障碍物，不能走；有的格子是空地，可以走。
给定一个迷宫，求从左上角走到右下角最少需要走多少步(数据保证一定能走到)。只能在水平方向或垂直方向走，不能斜着走。

//第一种方法：DFS（递归极易超时）

#include <stdio.h>
#include <stdlib.h>
char arr[200][50];
int ch[200][50];
int r, c;
int min = 100000000;
void test(int LL, int RR, int sum)
{
	if (LL == r - 1 && RR == c - 1)
	{
		min = min < sum ? min : sum;
		return;
	}
	ch[LL][RR] = 1;
	if (arr[LL + 1][RR] == '.' && ch[LL + 1][RR] != 1)
	{
		test(LL + 1, RR, sum + 1);
		ch[LL + 1][RR] = 0;
	}
	if (arr[LL][RR - 1] == '.' && ch[LL][RR - 1] != 1)
	{
		test(LL, RR - 1, sum + 1);
		ch[LL][RR - 1] = 0;
	}
	if (arr[LL][RR + 1] == '.' && ch[LL][RR + 1] != 1)
	{
		test(LL, RR + 1, sum + 1);
		ch[LL][RR + 1] = 0;
	}
	if (arr[LL - 1][RR] == '.' && ch[LL - 1][RR] != 1)
	{
		test(LL - 1, RR, sum + 1);
		ch[LL - 1][RR] = 0;
	}
}
int main()
{
	scanf("%d%d", &r, &c);
	for (int a = 0;a < r;++a)
		scanf("%s", arr[a]);
	test(0, 0, 1);
	printf("%d", min);
	return 0;
}



#include <stdio.h>
#include <stdlib.h>
char arr[100][100] = { '\0' };
int ch[100][100] = { 0 };
int road[4][2] = { {0,1},{1,0},{0,-1},{-1,0} };
int r, c;
int min = 100000000;
void test(int LL, int RR, int sum)
{
	if (LL == r - 1 && RR == c - 1 )
	{
		min = sum < min ? sum : min;
		return;
	}
	for (int a = 0;a < 4;++a)
	{
		int newLL = LL + road[a][0];
		int newRR = RR + road[a][1];
		if (arr[newLL][newRR] == '.' && ch[newLL][newRR] == 0)
		{
			ch[newLL][newRR] = 1;
			test(newLL, newRR, sum + 1);
			ch[newLL][newRR] = 0;
		}
	}
}
int main()
{
	scanf("%d%d", &r, &c);
	for (int a = 0;a < r;++a)
		scanf("%s", arr[a]);
	test(0, 0, 1);
	printf("%d", min);
	return 0;
}




第二种方法：BFS（时间复杂度较低）

//此题数据不算大，但是dfs仍会超时，因此必须使用bfs
//c++使用bfs比较简单，而c语言必须手写队列

#include <stdio.h>
#include <stdlib.h>
typedef struct
{
	int x;
	int y;
	int step;
}now;
char arr[100][100];
int visit[100][100];
now queue[10000];
int method[4][2] = { {0,1},{1,0},{0,-1},{-1,0} };
int main()
{
	int newx = 0, newy = 0;
	int r, c;
	scanf("%d%d", &r, &c);
	for (int a = 0;a < r;++a)
		scanf("%s", arr[a]);
	int rear = 0;
	int front = 0;
	queue[++rear].x = 0;
	queue[rear].y = 0;
	queue[rear].step = 1;
	visit[0][0] = 1;
	while (rear != front)
	{
		++front;
		for (int a = 0;a < 4;++a)
		{
			newx = queue[front].x + method[a][0];
			newy = queue[front].y + method[a][1];
			if (arr[newx][newy] == '.' && visit[newx][newy] == 0)
			{
				rear = (rear + 1) % 10000;
				queue[rear].x = newx;
				queue[rear].y = newy;
				queue[rear].step = queue[front].step + 1;
				visit[newx][newy] = 1;
			}
			if (newx == r - 1 && newy == c - 1)
			{
				printf("%d", queue[rear].step);
				return 0;
			}
		}
	}
	return 0;
}
``c
